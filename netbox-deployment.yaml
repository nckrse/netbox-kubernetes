---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-redis
  namespace: netbox
  labels:
    name: netbox-redis
    part-of: netbox
spec:
  selector:
    matchLabels:
      name: netbox-redis
      part-of: netbox
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: netbox-redis
        part-of: netbox
    spec:
      containers:
      - args:
        - sh
        - -c
        - redis-server --appendonly yes --requirepass $REDIS_PASSWORD
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis_password
              name: netbox-secrets
        image: redis:5-alpine
        name: netbox-redis
        resources: {}
        volumeMounts:
        - mountPath: /data
          name: netbox-redis-pvc
      restartPolicy: Always
      volumes:
      - name: netbox-redis-pvc
        persistentVolumeClaim:
          claimName: netbox-redis-pvc
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: netbox-redis
  namespace: netbox
  labels:
    name: netbox-redis
    part-of: netbox
spec:
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  selector:
    name: netbox-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-postgres
  namespace: netbox
  labels:
    name: netbox-postgres
    part-of: netbox
spec:
  selector:
    matchLabels:
      name: netbox-postgres
      part-of: netbox
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: netbox-postgres
        part-of: netbox
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB
              name: netbox-postgres-env
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres_password
              name: netbox-secrets
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_USER
              name: netbox-postgres-env
        - name: POSTGRES_HOST_AUTH_METHOD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_HOST_AUTH_METHOD
              name: netbox-postgres-env
        image: postgres:12-alpine
        name: netbox-postgres
        ports:
        - containerPort: 5432
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: netbox-postgres-pvc
      restartPolicy: Always
      volumes:
      - name: netbox-postgres-pvc
        persistentVolumeClaim:
          claimName: netbox-postgres-pvc
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: netbox-postgres
  namespace: netbox
  labels:
    name: netbox-postgres
    part-of: netbox
spec:
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  selector:
    name: netbox-postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-worker
  namespace: netbox
  labels:
    name: netbox-worker
    part-of: netbox
spec:
  selector:
    matchLabels:
      name: netbox-worker
      part-of: netbox
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: netbox-worker
        part-of: netbox
    spec:
      containers:
      - args:
        - rqworker
        command:
        - python3
        - /opt/netbox/netbox/manage.py
        env:
        - name: CORS_ORIGIN_ALLOW_ALL
          valueFrom:
            configMapKeyRef:
              key: CORS_ORIGIN_ALLOW_ALL
              name: netbox-env
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              key: DB_HOST
              name: netbox-env
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              key: DB_NAME
              name: netbox-env
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres_password
              name: netbox-secrets
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              key: DB_USER
              name: netbox-env
        - name: EMAIL_FROM
          valueFrom:
            configMapKeyRef:
              key: EMAIL_FROM
              name: netbox-env
        - name: EMAIL_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: EMAIL_PASSWORD
              name: netbox-env
        - name: EMAIL_PORT
          valueFrom:
            configMapKeyRef:
              key: EMAIL_PORT
              name: netbox-env
        - name: EMAIL_SERVER
          valueFrom:
            configMapKeyRef:
              key: EMAIL_SERVER
              name: netbox-env
        - name: EMAIL_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: EMAIL_TIMEOUT
              name: netbox-env
        - name: EMAIL_USERNAME
          valueFrom:
            configMapKeyRef:
              key: EMAIL_USERNAME
              name: netbox-env
        - name: MAX_PAGE_SIZE
          valueFrom:
            configMapKeyRef:
              key: MAX_PAGE_SIZE
              name: netbox-env
        - name: MEDIA_ROOT
          valueFrom:
            configMapKeyRef:
              key: MEDIA_ROOT
              name: netbox-env
        - name: NAPALM_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: NAPALM_PASSWORD
              name: netbox-env
        - name: NAPALM_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: NAPALM_TIMEOUT
              name: netbox-env
        - name: NAPALM_USERNAME
          valueFrom:
            configMapKeyRef:
              key: NAPALM_USERNAME
              name: netbox-env
        - name: CACHING_REDIS_DATABASE
          valueFrom:
            configMapKeyRef:
              key: CACHING_REDIS_DATABASE
              name: netbox-env
        - name: CACHING_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: CACHING_REDIS_HOST
              name: netbox-env
        - name: CACHING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis_password
              name: netbox-secrets
        - name: CACHING_REDIS_SSL
          valueFrom:
            configMapKeyRef:
              key: CACHING_REDIS_SSL
              name: netbox-env
        - name: TASKS_REDIS_DATABASE
          valueFrom:
            configMapKeyRef:
              key: TASKS_REDIS_DATABASE
              name: netbox-env
        - name: TASKS_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: TASKS_REDIS_HOST
              name: netbox-env
        - name: TASKS_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis_password
              name: netbox-secrets
        - name: TASKS_REDIS_SSL
          valueFrom:
            configMapKeyRef:
              key: TASKS_REDIS_SSL
              name: netbox-env
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret_key
              name: netbox-secrets
        - name: SUPERUSER_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: superuser_api_token
              name: netbox-secrets
        - name: SUPERUSER_EMAIL
          valueFrom:
            configMapKeyRef:
              key: SUPERUSER_EMAIL
              name: netbox-env
        - name: SUPERUSER_NAME
          valueFrom:
            configMapKeyRef:
              key: SUPERUSER_NAME
              name: netbox-env
        - name: SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: superuser_password
              name: netbox-secrets
        image: netboxcommunity/netbox:snapshot
        name: netbox-worker
        resources: {}
        volumeMounts:
        - mountPath: /opt/netbox/netbox/static
          name: netbox-static-files-pvc
        - mountPath: /opt/netbox/netbox/media
          name: netbox-media-files-pvc
        - mountPath: /etc/netbox/config/configuration.py
          name: netbox-config
          subPath: configuration.py
      restartPolicy: Always
      volumes:
      - name: netbox-media-files-pvc
        persistentVolumeClaim:
          claimName: netbox-media-files-pvc
      - name: netbox-static-files-pvc
        persistentVolumeClaim:
          claimName: netbox-static-files-pvc
      - name: netbox-config
        configMap:
          name: netbox-env

status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-server
  namespace: netbox
  labels:
    name: netbox-server
    part-of: netbox
spec:
  selector:
    matchLabels:
      name: netbox-server
      part-of: netbox
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: netbox-server
        part-of: netbox
    spec:
      containers:
      - env:
        - name: CORS_ORIGIN_ALLOW_ALL
          valueFrom:
            configMapKeyRef:
              key: CORS_ORIGIN_ALLOW_ALL
              name: netbox-env
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              key: DB_HOST
              name: netbox-env
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              key: DB_NAME
              name: netbox-env
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres_password
              name: netbox-secrets
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              key: DB_USER
              name: netbox-env
        - name: EMAIL_FROM
          valueFrom:
            configMapKeyRef:
              key: EMAIL_FROM
              name: netbox-env
        - name: EMAIL_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: EMAIL_PASSWORD
              name: netbox-env
        - name: EMAIL_PORT
          valueFrom:
            configMapKeyRef:
              key: EMAIL_PORT
              name: netbox-env
        - name: EMAIL_SERVER
          valueFrom:
            configMapKeyRef:
              key: EMAIL_SERVER
              name: netbox-env
        - name: EMAIL_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: EMAIL_TIMEOUT
              name: netbox-env
        - name: EMAIL_USERNAME
          valueFrom:
            configMapKeyRef:
              key: EMAIL_USERNAME
              name: netbox-env
        - name: MAX_PAGE_SIZE
          valueFrom:
            configMapKeyRef:
              key: MAX_PAGE_SIZE
              name: netbox-env
        - name: MEDIA_ROOT
          valueFrom:
            configMapKeyRef:
              key: MEDIA_ROOT
              name: netbox-env
        - name: NAPALM_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: NAPALM_PASSWORD
              name: netbox-env
        - name: NAPALM_TIMEOUT
          valueFrom:
            configMapKeyRef:
              key: NAPALM_TIMEOUT
              name: netbox-env
        - name: NAPALM_USERNAME
          valueFrom:
            configMapKeyRef:
              key: NAPALM_USERNAME
              name: netbox-env
        - name: CACHING_REDIS_DATABASE
          valueFrom:
            configMapKeyRef:
              key: CACHING_REDIS_DATABASE
              name: netbox-env
        - name: CACHING_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: CACHING_REDIS_HOST
              name: netbox-env
        - name: CACHING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis_password
              name: netbox-secrets
        - name: CACHING_REDIS_SSL
          valueFrom:
            configMapKeyRef:
              key: CACHING_REDIS_SSL
              name: netbox-env
        - name: TASKS_REDIS_DATABASE
          valueFrom:
            configMapKeyRef:
              key: TASKS_REDIS_DATABASE
              name: netbox-env
        - name: TASKS_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: TASKS_REDIS_HOST
              name: netbox-env
        - name: TASKS_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis_password
              name: netbox-secrets
        - name: TASKS_REDIS_SSL
          valueFrom:
            configMapKeyRef:
              key: TASKS_REDIS_SSL
              name: netbox-env
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              key: secret_key
              name: netbox-secrets
        - name: SUPERUSER_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: superuser_api_token
              name: netbox-secrets
        - name: SUPERUSER_EMAIL
          valueFrom:
            configMapKeyRef:
              key: SUPERUSER_EMAIL
              name: netbox-env
        - name: SUPERUSER_NAME
          valueFrom:
            configMapKeyRef:
              key: SUPERUSER_NAME
              name: netbox-env
        - name: SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: superuser_password
              name: netbox-secrets
        image: netboxcommunity/netbox:snapshot
        name: netbox
        resources: {}
        volumeMounts:
        - mountPath: /opt/netbox/netbox/static
          name: netbox-static-files-pvc
        - mountPath: /opt/netbox/netbox/media
          name: netbox-media-files-pvc
        - mountPath: /etc/netbox/config/configuration.py
          name: netbox-config
          subPath: configuration.py
      restartPolicy: Always
      volumes:
      - name: netbox-media-files-pvc
        persistentVolumeClaim:
          claimName: netbox-media-files-pvc
      - name: netbox-static-files-pvc
        persistentVolumeClaim:
          claimName: netbox-static-files-pvc
      - name: netbox-config
        configMap:
          name: netbox-env
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: netbox-server
  namespace: netbox
  labels:
    name: netbox-server
    part-of: netbox
spec:
  ports:
    - protocol: TCP
      port: 8001
      targetPort: 8001
  selector:
    name: netbox-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netbox-nginx
  namespace: netbox
  labels:
    name: netbox-nginx
    part-of: netbox
spec:
  selector:
    matchLabels:
      name: netbox-nginx
      part-of: netbox
  replicas: 1
  template:
    metadata:
      labels:
        name: netbox-nginx
        part-of: netbox
    spec:
      containers:
        - name: netbox-nginx
          image: nginx:stable-alpine
          ports:
            - containerPort: 80
          command: ["nginx"]
          args: ["-c", "/etc/netbox-nginx/nginx.conf","-g", "daemon off;"]
          volumeMounts:
          - name: netbox-static-files-pvc
            mountPath: /opt/netbox/netbox/static
          - name: netbox-nginx-config
            mountPath: /etc/netbox-nginx
      restartPolicy: Always
      volumes:
        - name: netbox-static-files-pvc
          persistentVolumeClaim:
            claimName: netbox-static-files-pvc
        - name: netbox-nginx-config
          configMap:
            name: netbox-nginx-env
---
apiVersion: v1
kind: Service
metadata:
  name: netbox-nginx
  namespace: netbox
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    name: netbox-nginx
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: netbox-pg-dump
  namespace: netbox
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: netbox-pg-dump
              image: dustnic82/postgresclient-scp:latest
              args:
              - /bin/sh
              - -c
              - |
                pg_dump -U "$(POSTGRES_USER)" -h netbox-postgres "$(POSTGRES_DB)" > /var/lib/backups/$(date '+%Y-%m-%d-%H-%M').sql
                if [ $? -ne 0 ]
                then
                    echo "pg_dump failed"
                else
                    echo "pg_dump succesful: /var/lib/backups/$(date '+%Y-%m-%d-%H-%M').sql"
                fi
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    configMapKeyRef:
                      key: POSTGRES_DB
                      name: netbox-postgres-env
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: postgres_password
                      name: netbox-secrets
                - name: POSTGRES_USER
                  valueFrom:
                    configMapKeyRef:
                      key: POSTGRES_USER
                      name: netbox-postgres-env
              volumeMounts:
              - mountPath: /var/lib/backups
                name: netbox-postgres-pvc
                subPath: backups
          restartPolicy: OnFailure
          volumes:
          - name: netbox-postgres-pvc
            persistentVolumeClaim:
              claimName: netbox-postgres-pvc
